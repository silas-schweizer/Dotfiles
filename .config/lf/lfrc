set ratios 1:2:3
set shell bash
set drawbox
set icons true
set hidden true
set ignorecase true

#preview
set previewer lfpreviewer
set cleaner lfcleaner
set preview

#commands
cmd open &$OPENER "$f"
cmd execute &bash $f

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard


#dragon
cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx

cmd select-files ${{
  typeset -a files; files=( ${(@f)"$(fd . -L -d1 -tf)"} )
  for fi in "${files[@]}"; do
    lf -remote "send $id toggle $fi"
  done
}}


cmd dldragon ${{
  
url=$(dragon-drop -t -x)

if [ -n "$url" ]; then
  printf "File Name: "
  name=""
  while [ -z $name ] || [ -e $name ]
  do
    read -r name
    if [ -e "$name" ]; then
      printf "File already exists, overwrite (y|n): "
      read -r ans

      if [ "$ans" = "y" ]; then
        break
      else
        printf "File Name: "
      fi
    fi
  done

  # Download the file with curl
  [ -n "$name" ] && curl -o "$name" "$url" || exit 1
else
  exit 1
fi
}}

#broot jump
cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# append before ext
rename_before_ext() {
    # Check if no file is selected
    if [ -z "$fx" ]; then
        lf -remote "send $id echo 'No file selected'"
        return
    fi

    # Loop through each selected file
    echo "$fx" | while IFS= read -r f; do
        if [ -d "$f" ]; then
            # Skip directories
            continue
        else
            # Extract file extension
            ext="${f##*.}"
            # Calculate the length of the extension plus the dot
            ext_len=$(( ${#ext} + 1 ))
            # Prepare the cursor movement command to position before the extension
            pos=$(printf '<left>%.0s' $(seq 1 $ext_len))
            # Trigger rename action and position the cursor
            lf -remote "send $id rename"
            lf -remote "send $id push \"$pos\""
        fi
    done
}

cmd open_with %"$@" "$fx"
map ` push :open-with<space>

cmd bulk_rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd send-as-mail ${{
  mailspring $f 
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd zip %zip -r "$f" "$f"

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd select-files ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
        if [ "$lf_hidden" = "false" ]; then
          # remove any hidden files so you only select files you can see.
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd select-dirs ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
        if [ "$lf_hidden" = "false" ]; then
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd newfold ${{
    set -f
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unar -d "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}



# send file to archive
cmd send_archive ${{
    if [ -z "$fx" ]; then
        echo "No file selected"
    else
        mv -t ~/archive/!inbox $fx
        echo "Moved $fx to ~/archive/inbox"
    fi
}}

#send pdf to remarkable

cmd send_to_remarkable ${{ bash ~/.config/lf/send_2_remarkable.sh "$f" }}

 
#remove some defaults
map m
map o
map n
map d
map c
map e
map y
map u

#map keys

#dragon
map dr dragon
map ds dragon-stay
map di dragon-individual
map dl dldragon

#basic stuff
map . set hidden!
map ua unarchive
map sm send-as-mail
map mf mkfile
map md mkdir
map ms newfold
map l open
map dd delete
map ch chmod
map x cut
map p paste
map U unselect
map <enter> execute
map msf sudomkfile
map z zip
map L open_with

map <c-z> $ kill -STOP $PPID

#select and yank files
map Sf select-files
map Sd select-dirs
map yp yank-path
map yd yank-dirname
map yy copy

# miscellaneous maps
map sa send_archive
map sr send_to_remarkable


#select all files


# rename files
map r rename #at the very end
map i push A<a-b><a-b><a-f>
map a rename-before-ext

map b bulk_rename

# Navigation

map / broot_jump
map gp cd ~/projects
map gd cd ~/Downloads
map gc cd ~/.config
map gaa cd ~/areas
map gaa cd ~/areas
map gr cd ~/resources
map gar cd ~/archive
